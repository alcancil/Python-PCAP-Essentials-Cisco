# Shifting binário à esquerda e shifting binário à direita
# O Python oferece mais uma operação relacionada a bits individuais: shifting (deslocamento). Isto é aplicado apenas a valores inteiros, e não se deve # utilizar floats como argumentos.
#
# Você já aplica esta operação com alguma frequência, e bastante inconscientemente. De que forma multiplica qualquer número por dez? Dê uma vista de 
# olhos:
#
# 12345 × 10 = 123450
#
#
# Como se pode ver, multiplicar por dez é, de facto, um shifting de todos os dígitos para a esquerda, preenchendo a lacuna resultante com zero.
#
# Divisão por dez? Dê uma vista de olhos:
#
# 12340 ÷ 10 = 1234
#
#
# Dividir por dez não é mais do que um shifting dos dígitos para a direita
#
# O mesmo tipo de operação é realizado pelo computador, mas com uma diferença: como dois é a base para números binários (não 10), o shifting de um 
# valor um bit para a esquerda corresponde assim a multiplicá-lo por dois; respetivamente, o shifting um bit para a direita é o mesmo que dividí-lo por # dois (repare que o bit mais à direita é perdido).
#
# Os operadores shift em Python são um par de dígrafos: << e >>, sugerindo claramente em que direção a mudança irá ocorrer.
#
# value << bits
# value >> bits
#
#
# O argumento à esquerda destes operadores é um valor inteiro cujos bits são deslocados. O argumento à direita determina o tamanho do shifting.
#
# Isto demonstra que esta operação não é certamente comutativa.
#
# A prioridade destes operadores é muito alta. Vê-los-á na tabela de prioridades atualizada, que lhe mostraremos no final desta secção.
#
# Dê uma vista de olhos nas mudanças na janela do editor.
#
# A invocação print() final produz o seguinte output:
#
# 17 68 8
# output
#
# Nota:
#
# 17 >> 1 → 17 // 2 (17 divido por baixo por 2 à potência de 1) → 8 (shifting para a direita por um bit é o mesmo que a divisão inteira por dois)
# 17 << 2 → 17 * 4 17 multiplicado por 2 à potência de 2) → 68 (shifting para a esquerda por dois bits é o mesmo que a multiplicação de inteiros por 
# quatro)
#
# E aqui está a tabela de prioridades atualizada, contendo todos os operadores introduzidos até agora:
#
# Prioridade	Operador	
#    1	       ~, +, -	    unário
#    2	         **	
#    3	       *, /, //, %	
#    4	       +, -	          binário
#    5	       <<, >>	
#    6	       <, <=, >, >=	
#    7	       ==, !=	
#    8	       &	
#    9 	       |	
#   10	       =, +=, -=, *=, /=, %=, &=, ^=, |=, >>=, <<=	
