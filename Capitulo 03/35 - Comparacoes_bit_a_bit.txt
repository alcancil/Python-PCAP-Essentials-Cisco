# Como lidamos com bits individuais?
# Vamos agora mostrar-lhe aquilo para que pode utilizar os operadores bitwise. Imagine que é um programador obrigado a escrever uma parte importante de # um sistema operativo. Foi informado de que tem permissão para usar uma variável atribuída da seguinte maneira:
#
# flag_register = 0x1234
#
#
# A variável armazena as informações sobre vários aspectos da operação do sistema. Cada bit da variável armazena um valor yes/no. Também lhe foi dito 
# que apenas um destes bits é seu - o terceiro (lembre-se que os bits são numerados a partir do zero, e o bit número zero é o mais baixo, enquanto o 
# mais alto é o número 31). Os bits restantes não podem ser alterados, porque se destinam a armazenar outros dados. Aqui está o seu bit marcado pela 
# letra x:
#
# flag_register = 0000000000000000000000000000x000
#
#
# Pode ser confrontado com as seguintes tarefas:
#
# 1. Verifique o estado do seu bit - quer descobrir o valor do seu bit; comparar a variável inteira com zero não fará nada, porque os bits restantes 
# podem ter valores completamente imprevisíveis, mas pode usar a seguinte propriedade de conjunção:
#
# x & 1 = x
# x & 0 = 0
#
#
# Se aplicar a & operação à flag_register variável juntamente com a seguinte imagem de bit:
#
# 00000000000000000000000000001000
# 
# (observe o 1 na posição do seu bit) como resultado, obtém uma das seguintes strings de bit:
#
# 00000000000000000000000000001000 se o seu bit foi definido para 1
# 00000000000000000000000000000000 se o seu bit foi redefinido para 0
# Tal sequência de zeros e uns, cuja tarefa é agarrar o valor ou alterar os bits selecionados, é chamada de bit mask.
#
# er criada através da seguinte declaração:
#
# the_mask = 8
#
#
#
# Também pode fazer uma sequência de instruções dependendo do estado do seu bit i aqui está:
#
# if flag_register & the_mask:
#    # My bit is set.
# else:
#    # My bit is reset.
#
#
# 2. Redefina o seu bit - atribua um zero ao bit enquanto todos os outros bits devem permanecer inalterados; utilizemos a mesma propriedade de 
# conjunção como antes, mas utilizemos uma mask ligeiramente diferente - exatamente como em baixo:
#
# 11111111111111111111111111110111
#
#
# Observe que a mask foi criada como resultado da negação de todos os bits de the_mask variável. Redefinir o bit é simples, e parece-se com isto 
# (escolha o que mais gostar):
#
# flag_register = flag_register & ~the_mask
# flag_register &= ~the_mask
#
#
#
# 3. Defina o seu bit - atribua um 1 ao seu bit, enquanto todos os bits restantes devem permanecer inalterados; use a seguinte propriedade de 
# disjunção:
#
# x | 1 = 1
# x | 0 = x
#
#
# Agora está pronto para definir o seu bit com uma das seguintes instruções:
#
# flag_register = flag_register | the_mask
# flag_register |= the_mask
#
#
# 4. Negue o seu bit - substitua um 1 com um 0 e um 0 com um 1. Pode utilizar uma propriedade interessante do xor operador:
#
# x ^ 1 = ~x
# x ^ 0 = x
#
#
# e negue o seu bit com as seguintes instruções:
#
# flag_register = flag_register ^ the_mask
# flag_register ^= the_mask
