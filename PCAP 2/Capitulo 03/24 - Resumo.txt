Key takeaways

1. Uma variável de instância é uma propriedade cuja existência depende da criação de um objeto. Cada objeto pode ter um conjunto diferente de variáveis de instância.

Além disso, eles podem ser livremente adicionados aos, e removidos dos, objetos durante a sua vida útil. Todas as variáveis de instância de objeto são armazenadas dentro de um dicionário dedicado, chamado __dict__, contido em cada objeto separadamente.

2. Uma variável de instância pode ser privada quando o seu nome começa por __, mas não se esqueça que tal propriedade ainda é acessível de fora da classe, utilizando um nome mangled construído como _ClassName__PrivatePropertyName.

3. Uma variável de classe é uma propriedade que existe exatamente numa cópia, e não precisa de nenhum objeto criado para ser acessível. Tais variáveis não são mostradas como conteúdo __dict__ .

Todas as variáveis de classe de uma classe são armazenadas dentro de um dicionário dedicado, chamado __dict__, contido em cada classe separadamente.


4. Uma função chamada hasattr() pode ser utilizada para determinar se um qualquer objeto/classe contém uma propriedade especificada.

Por exemplo:
class Sample:
    gamma = 0 # Class variable.
    def __init__(self):
        self.alpha = 1 # Instance variable.
        self.__delta = 3 # Private instance variable.


obj = Sample()
obj.beta = 2  # Another instance variable (existing only inside the "obj" instance.)
print(obj.__dict__)


Output do código:
{'alpha': 1, '_Sample__delta': 3, 'beta': 2}

output


Exercício 1

Quais das Python propriedades de classe são variáveis de instância, e quais são variáveis de classe? Quais delas são privadas?

class Python:
    population = 1
    victims = 0
    def __init__(self):
        self.length_ft = 3
        self.__venomous = False

population e victims são variáveis de classe, enquanto length e __venomous são variáveis de instância (a última também é privada).


Exercício 2

Vai negar a __venomous propriedade do objeto version_2 , ignorando o facto de que a propriedade é privada. Como vai fazer isto?
version_2 = Python()


version_2._Python__venomous = not version_2._Python__venomous


Exercício 3

Escreva uma expressão que verifica se o objeto version_2 contém uma propriedade de instância chamada constrictor (sim, constrictor!).

hasattr(version_2, 'constrictor')

