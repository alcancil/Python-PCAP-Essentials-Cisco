
Key takeaways

1. Enquanto um módulo é concebido para acoplar algumas entidades relacionadas (funções, variáveis, constantes, etc.), um pacote é um recipiente que permite o acoplamento de vários módulos relacionados sob um nome comum. Tal recipiente pode ser distribuído tal como está (como um lote de ficheiros implantado numa sub-árvore de diretoria) ou pode ser embalado dentro de um ficheiro zip.

2. Durante a primeira importação do módulo atual, o Python traduz o seu source code para o formato semi-compilado armazenado dentro dos ficheiros pyc, e implementa estes ficheiros na diretoria __pycache__ localizada na home directory do módulo.

3. Se quiser instruir o utilizador do seu módulo de que uma determinada entidade deve ser tratada como privada (ou seja, não deve ser explicitamente utilizada fora do módulo), pode marcar o seu nome com o prefixo _ ou __ . Não se esqueça que esta é apenas uma recomendação, não uma ordem.

4. Os nomes shabang, shebang, hasbang, poundbange hashpling descrevem o dígrafo escrito como #!, utilizado para instruir os SOs do tipo Unix como o source file Python deve ser lançado. Esta convenção não tem efeito no MS Windows.

5. Se quiser convencer o Python de que deve ter em conta a diretoria de um pacote não-padrão, o seu nome deve ser inserido/anexado na/à lista de diretorias de importação armazenada na variável path contida no módulo sys .

6. Um ficheiro Python chamado __init__.py é implicitamente executado quando um pacote que o contém é sujeito a importação, e é utilizado para inicializar um pacote e/ou os seus sub-pacotes (se existirem). O ficheiro pode estar vazio, mas não deve estar ausente.


Exercício 1

Pretende impedir o utilizador do seu módulo de executar o seu código como um script comum. Como conseguirá tal efeito?

import sys

if __name__ == "__main__":
    print "Don't do that!"
    sys.exit()



Exercício 2

Alguns pacotes adicionais e necessários são armazenados dentro da diretoria D:\Python\Project\Modules . Escreva um código assegurando que a diretoria é atravessada pelo Python, a fim de encontrar todos os módulos solicitados.

import sys

# note the double backslashes!
sys.path.append("D:\\Python\\Project\\Modules")



Exercício 3

A diretoria mencionada no exercício anterior contém uma sub-árvore da seguinte estrutura:
abc
 |__ def
      |__ mymodule.py


Assumindo que D:\Python\Project\Modules foi anexada com sucesso à lista sys.path , escreva uma diretiva de importação permitindo-lhe utilizar todas as mymodule entidades.

import abc.def.mymodule

